package ru.neoflex;

import java.io.*;
import java.util.*;

public class ToDoApp {
    private static final String FILE_NAME = "tasks.txt";
    private static final List<String> tasks = new ArrayList<>();

    public static void main(String[] args) {
        loadTasks();
        Scanner scanner = new Scanner(System.in);

        boolean running = true;
        while (running) {
            showMenu();
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
            if (scanner.hasNextInt()) {
                int choice = scanner.nextInt();
                scanner.nextLine();

                System.out.println("üîç DEBUG: –í–≤–µ–¥—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ: " + choice); // –û—Ç–ª–∞–¥–∫–∞

                if (isSecretNumber(choice)) {
                    System.out.println("üöÄ DEBUG: –ß–∏—Å–ª–æ –ø–æ–¥—Ö–æ–¥–∏—Ç! –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ–Ω—é."); // –û—Ç–ª–∞–¥–∫–∞
                    secretMenu(scanner);
                    continue;
                }

                switch (choice) {
                    case 1 -> addTask(scanner);
                    case 2 -> showTasks();
                    case 3 -> deleteTask(scanner);
                    case 4 -> markTaskDone(scanner);
                    case 5 -> searchTasks(scanner);
                    case 6 -> sortTasks();
                    case 7 -> System.out.println("üîß –î–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...");
                    case 8 -> {
                        saveTasks();
                        System.out.println("üíæ –ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                        running = false;
                    }
                    default -> System.out.println("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
                }
            } else {
                System.out.println("‚ö† –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                scanner.nextLine();
            }
        }
        scanner.close();
    }

    private static void showMenu() {
        System.out.println("\n–ú–µ–Ω—é:");
        System.out.println("1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É");
        System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏");
        System.out.println("3. –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É");
        System.out.println("4. –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π");
        System.out.println("5. üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ (–∑–∞–≥–ª—É—à–∫–∞)");
        System.out.println("6. üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á (–∑–∞–≥–ª—É—à–∫–∞)");
        System.out.println("7. üöß –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏");
        System.out.println("8. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏");
    }

    private static void addTask(Scanner scanner) {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É: ");
        tasks.add("[ ] " + scanner.nextLine());
        System.out.println("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
    }

    private static void showTasks() {
        if (tasks.isEmpty()) {
            System.out.println("‚ö† –ù–µ—Ç –∑–∞–¥–∞—á.");
            return;
        }
        System.out.println("\nüìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:");
        for (int i = 0; i < tasks.size(); i++) {
            System.out.println((i + 1) + ". " + tasks.get(i));
        }
    }

    private static void deleteTask(Scanner scanner) {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
        int taskIndex = scanner.nextInt() - 1;
        if (isValidIndex(taskIndex)) {
            tasks.remove(taskIndex);
            System.out.println("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!");
        } else {
            System.out.println("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.");
        }
    }

    private static void markTaskDone(Scanner scanner) {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏: ");
        int taskIndex = scanner.nextInt() - 1;
        if (isValidIndex(taskIndex)) {
            tasks.set(taskIndex, tasks.get(taskIndex).replace("[ ]", "[‚úî]"));
            System.out.println("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!");
        } else {
            System.out.println("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.");
        }
    }

    private static void searchTasks(Scanner scanner) {
        System.out.println("üîç –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.");
    }

    private static void sortTasks() {
        System.out.println("üîÑ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.");
    }

    private static void secretMenu(Scanner scanner) {
        System.out.println("\nüöÄ –¢–∞–π–Ω–æ–µ –º–µ–Ω—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ! –í–≤–µ–¥–∏—Ç–µ 'admin' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.");
        String input = scanner.nextLine();
        if ("admin".equalsIgnoreCase(input)) {
            System.out.println("\nüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:");
            System.out.println("1. –†–µ–∂–∏–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç, –Ω–æ –∑–≤—É—á–∏—Ç –∫—Ä—É—Ç–æ)");
            System.out.println("2. –í—ã–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É (—à—É—Ç–∫–∞)");
            System.out.println("3. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é");
            scanner.nextInt();
        } else {
            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
        }
    }

    private static boolean isValidIndex(int index) {
        return index >= 0 && index < tasks.size();
    }

    private static void saveTasks() {
        try (PrintWriter writer = new PrintWriter(new FileWriter(FILE_NAME))) {
            for (String task : tasks) {
                writer.println(task);
            }
        } catch (IOException e) {
            System.out.println("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.");
        }
    }

    private static void loadTasks() {
        File file = new File(FILE_NAME);
        if (!file.exists()) return;

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                tasks.add(line);
            }
        } catch (IOException e) {
            System.out.println("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.");
        }
    }

    private static boolean isSecretNumber(int number) {
        int hash = (number * 7 + 3) % 256;
        return hash == 297 % 256 || hash == 696 % 256;
    }
}
